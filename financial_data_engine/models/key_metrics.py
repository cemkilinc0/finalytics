from django.db import models
from .company import CompanyTableModel

app_name = "financial_data_engine"


class KeyMetricsTableModel(models.Model):
    id = models.AutoField(primary_key=True)
    company = models.ForeignKey(CompanyTableModel, on_delete=models.CASCADE, db_column="companyID")
    date = models.DateField()
    symbol = models.CharField(max_length=10)
    calendarYear = models.IntegerField(null=True)
    period = models.CharField(max_length=10, null=True)
    revenuePerShare = models.FloatField(null=True)
    netIncomePerShare = models.FloatField(null=True)
    operatingCashFlowPerShare = models.FloatField(null=True)
    freeCashFlowPerShare = models.FloatField(null=True)
    cashPerShare = models.FloatField(null=True)
    bookValuePerShare = models.FloatField(null=True)
    tangibleBookValuePerShare = models.FloatField(null=True)
    shareholdersEquityPerShare = models.FloatField(null=True)
    interestDebtPerShare = models.FloatField(null=True)
    marketCap = models.BigIntegerField(null=True)
    enterpriseValue = models.BigIntegerField(null=True)
    peRatio = models.FloatField(null=True)
    priceToSalesRatio = models.FloatField(null=True)
    pocfratio = models.FloatField(null=True)
    pfcfRatio = models.FloatField(null=True)
    pbRatio = models.FloatField(null=True)
    ptbRatio = models.FloatField(null=True)
    evToSales = models.FloatField(null=True)
    enterpriseValueOverEBITDA = models.FloatField(null=True)
    evToOperatingCashFlow = models.FloatField(null=True)
    evToFreeCashFlow = models.FloatField(null=True)
    earningsYield = models.FloatField(null=True)
    freeCashFlowYield = models.FloatField(null=True)
    debtToEquity = models.FloatField(null=True)
    debtToAssets = models.FloatField(null=True)
    netDebtToEBITDA = models.FloatField(null=True)
    currentRatio = models.FloatField(null=True)
    interestCoverage = models.FloatField(null=True)
    incomeQuality = models.FloatField(null=True)
    dividendYield = models.FloatField(null=True)
    payoutRatio = models.FloatField(null=True)
    salesGeneralAndAdministrativeToRevenue = models.FloatField(null=True)
    researchAndDdevelopementToRevenue = models.FloatField(null=True)
    intangiblesToTotalAssets = models.FloatField(null=True)
    capexToOperatingCashFlow = models.FloatField(null=True)
    capexToRevenue = models.FloatField(null=True)
    capexToDepreciation = models.FloatField(null=True)
    stockBasedCompensationToRevenue = models.FloatField(null=True)
    grahamNumber = models.FloatField(null=True)
    roic = models.FloatField(null=True)
    returnOnTangibleAssets = models.FloatField(null=True)
    grahamNetNet = models.FloatField(null=True)
    workingCapital = models.BigIntegerField(null=True)
    tangibleAssetValue = models.BigIntegerField(null=True)
    netCurrentAssetValue = models.BigIntegerField(null=True)
    investedCapital = models.FloatField(null=True)
    averageReceivables = models.BigIntegerField(null=True)
    averagePayables = models.BigIntegerField(null=True)
    averageInventory = models.BigIntegerField(null=True)
    daysSalesOutstanding = models.FloatField(null=True)
    daysPayablesOutstanding = models.FloatField(null=True)
    daysOfInventoryOnHand = models.FloatField(null=True)
    receivablesTurnover = models.FloatField(null=True)
    payablesTurnover = models.FloatField(null=True)
    inventoryTurnover = models.FloatField(null=True)
    roe = models.FloatField(null=True)
    capexPerShare = models.FloatField(null=True)

    def __str__(self):
        return f"{self.company} - {self.date} - {self.period}"

    class Meta:
        db_table = "key_metrics_table"
